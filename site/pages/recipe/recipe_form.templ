package recipe

import "github.com/JamesTiberiusKirk/recipe-cms/models"
import "github.com/JamesTiberiusKirk/recipe-cms/site/components"
import "fmt"

type recipeFormProps struct {
	Recipe         models.Recipe
	AvailableUnits []models.Unit
}

css recipeFromStyles() {
	width: 100%;
}

const (
	recipeFormID = "recipe_form"
)

templ recipeForm(props recipeFormProps) {
	<div
 		class={ recipeFromStyles() }
	>
		<form
 			id={ recipeFormID }
 			name="recipe"
 			hx-ext="json-enc-nested"
		>
			<div style="display:flex; flex-direction: row; justify-content: space-between; ">
				@components.Input(components.InputProps{
					Value: props.Recipe.Name,
					DisplayName: "Name:",
					Name: []string{"recipe", "name"},
					Type: components.InputTypeText,
				})
				<button
 					style="width: 80px; height: 30px; margin-top: 20px;"
 					hx-post={ fmt.Sprintf("/recipe/%s", props.Recipe.ID) }
 					hx-include="#recipe_form"
 					hx-select={ "#" + recipeContainerID + "_inner" }
 					hx-target={ "#" + recipeContainerID }
 					hx-swap="innerHTML"
 					hx-push-url="true"
				>
					DONE
				</button>
			</div>
			// TODO: figure out how I wanna handle tags
			//@components.Input(components.InputProps{
			//	Value: props.Recipe.Tags,
			//	DisplayName: "Tags:",
			//	Name: []string{"recipe", "tags"},
			//	Type: components.InputTypeText,
			//})
			<br/>
			@components.TextArea(components.TextAreaProps{
					ID: "introduction",
					FormID: recipeFormID,
					Value: props.Recipe.Intro,
					Rows: 5,
					DisplayName: "Intro:",
					Name: []string{"recipe", "intro"},
					MarkdownPreview: true,
				})
			<br/>
			<br/>
			@components.TextArea(components.TextAreaProps{
					ID: "description",
					FormID: recipeFormID,
					Value: props.Recipe.Description,
					Rows: 5,
					DisplayName: "Description:",
					Name: []string{"recipe", "description"},
					MarkdownPreview: true,
				})
			<br/>
			<br/>
			<br/>
			Ingredients:
			<div id="ingredients">
				for _, ingr := range props.Recipe.Ingredients {
					@components.Ingredient(components.IngredientProps{
							// ID: fmt.Sprintf("ingredient:%d", i),
							Ingredient: ingr,
							AvailableUnits: props.AvailableUnits,
							FormName: []string{"recipe", "ingredients", ""},
						})
				}
			</div>
			<br/>
			<button
 				hx-get="/recipe/ingredient"
 				hx-swap="beforeend"
 				hx-target="#ingredients"
 				hx-select="#ingredient"
 				style="width: 100%; height: 30px;"
			>
				Add ingredient
			</button>
			<br/>
			<br/>
			<br/>
			Seasonings:
			<div id="seasonings">
				for _, ingr := range props.Recipe.Seasonings {
					@components.Ingredient(components.IngredientProps{
							//ID: fmt.Sprintf("seasoning:%d",i),
							Ingredient: ingr,
							AvailableUnits: props.AvailableUnits,
							FormName: []string{"recipe", "seasonings", ""},
						})
				}
			</div>
			<br/>
			<button
 				hx-get="/recipe/ingredient?type=seasoning"
 				hx-swap="beforeend"
 				hx-target="#seasonings"
 				hx-select="#seasoning"
 				style="width: 100%; height: 30px;"
			>
				Add Seasoning 
			</button>
			<br/>
			<br/>
			@components.TextArea(components.TextAreaProps{
					ID: "instructions",
					Value: props.Recipe.Instructions ,
					Rows: 10,
					DisplayName: "Instructions:",
					Name: []string{"recipe", "instructions"},
					MarkdownPreview: true,
				})
			<br/>
			@components.TextArea(components.TextAreaProps{
					ID: "closing",
					FormID: recipeFormID,
					Value: props.Recipe.Closing,
					Rows: 5,
					DisplayName: "Closing thoughts:",
					Name: []string{"recipe", "closing"},
					MarkdownPreview: true,
				})
			<br/>
			<button
 				id="submit-all"
 				style="width: 100%; height: 30px;"
 				hx-post={ fmt.Sprintf("/recipe/%s?edit=true", props.Recipe.ID) }
 				hx-include={ "#" + recipeFormID }
 				hx-select={ "#" + recipeContainerID + "_inner" }
 				hx-target={ "#" + recipeContainerID }
 				hx-swap="innerHTML"
			>
				Update	
			</button>
		</form>
	</div>
}
