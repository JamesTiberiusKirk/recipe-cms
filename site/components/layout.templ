package components

templ navBar() {
	<header class="block w-1/2 mx-auto">
		<div class="flex">
			<a class="" href="/recipes">Recipes</a>
			<a class="pl-1" href="/recipe/new">Add Recipe</a>
		</div>
	</header>
}

script onLoad() {
	// htmx.logAll();

	htmx.config.defaultSettleDelay = 0;
	//document.addEventListener('htmx:afterRequest', function (event) {
	// console.log(event)
	//})
	document.addEventListener('htmx:beforeOnLoad', function (event) {
			// console.log("htmx:beforeOnLoad CUSTOM", event)

			const res = event.detail.xhr
			const isValidationRoute = (event.detail.requestConfig.path.search("validate"))

			if (isValidationRoute) {
				if (res.status === 400) {
					// console.log("status === 400")
					event.detail.shouldSwap = true;
					event.detail.isError = false;
				}

				if (res.status === 200) {
					// console.log("status === 200")
				}
			}

			// Bellow is an example of creating your own custom attibutes
			// In this example I have created attibutes which dynamically enables or disables (buttons) when using validation routes
			// This same could be expanded for a lot of other behaviour
			// However, this should not be overused as it could already be covered in htmx
			// AND because too much js here will just render the whole point of htmx nil
			if (isValidationRoute) {
				if (res.status === 400) {
					const disableOnErrorTargetId = event.srcElement.getAttribute("disableOnError")
					if (disableOnErrorTargetId) {
						const targetIdParsed = disableOnErrorTargetId.replace("#", "")
							const target = document.getElementById(targetIdParsed)
							if (target) target.setAttribute("disabled", true)
					}
				}

				if (res.status === 200) {
				const enableOnValidTargetId = event.srcElement.getAttribute("enableOnValid")
					if (enableOnValidTargetId) {
						const targetIdParsed = enableOnValidTargetId.replace("#", "")
						const target = document.getElementById(targetIdParsed)
						if (target) target.removeAttribute("disabled")
					}
				}
			}
	});

	htmx.defineExtension('markdown-preview', {
		onEvent: function (name, evt) {
			if (name === "htmx:configRequest"){
				console.log("markdown configRequest",evt)
				evt.detail.headers['Content-Type'] = "text/plain";
			}
		},
		encodeParameters : function(xhr, parameters, elt) {
			console.log("markdown elt.value:", elt.value)
			if (elt.tagName !== "FORM"){
				xhr.overrideMimeType('text/plain');
				return encodeURIComponent(elt.value)
			}
		}
	});

	htmx.defineExtension('json-enc-nested', {
		onEvent: function (name, evt) {
			if (name === "htmx:configRequest" ){
				console.log("json-enc-nested:",evt)
			}
			if (name === "htmx:configRequest" &&
				(evt.srcElement.tagName === "FORM" ||
				 evt.srcElement.form != undefined) ) {
				console.log("json-enc-nested:",evt)
				evt.detail.headers['Content-Type'] = "application/json";
			}
		},
		encodeParameters : function(xhr, parameters, elt) {
			console.log("json-enc-nested elt:")
			console.dir(elt)

			if (elt.form === undefined) return

			let jsonEnc = $(elt.form).serializeJSON()
			console.log("json-enc-nested",jsonEnc)

			xhr.overrideMimeType('application/json');
			return JSON.stringify(jsonEnc);
		}
	});

	// let src = new EventSource("/_templ/reload/events");
	// src.onmessage = (event) => {
	// 	if (event && event.data === "reload") {
	// 		window.location.reload();
	// 	}
	// };
}

templ Layout() {
	<html class="dark">
		<head>
			<link rel="stylesheet" href="/assets/styles.css"/>
			<link rel="stylesheet" href="/assets/tailwind.css"/>
		</head>
		<body class="dark:bg-gray-800 dark:text-white" onload={ onLoad() }>
			<script src="/assets/htmx.org@1.9.6"></script>
			<script src="/assets/hyperscript.org@0.9.12"></script>
			<script src="/assets/loading-states.js"></script>
			<script src="/assets/json-enc.js"></script>
			<script src="/assets/jquery-3.7.1.min.js"></script>
			<script src="/assets/serializeForm.js"></script>
			@navBar()
			<div class="mx-auto w-3/4">
				{ children... }
			</div>
		</body>
	</html>
}
