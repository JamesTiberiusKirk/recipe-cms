package components

import "fmt"

type InputType string

// <input type="button">
// <input type="checkbox">
// <input type="color">
// <input type="date">
// <input type="datetime-local">
// <input type="email">
// <input type="file">
// <input type="hidden">
// <input type="image">
// <input type="month">
// <input type="number">
// <input type="password">
// <input type="radio">
// <input type="range">
// <input type="reset">
// <input type="search">
// <input type="submit">
// <input type="tel">
// <input type="text">
// <input type="time">
// <input type="url">
// <input type="week">
// TODO: need to go through and see whats reasonably supported here
const (
	InputTypeNumber        InputType = "number"
	InputTypeText          InputType = "text"
	InputTypePasswrod      InputType = "password"
	InputTypeButton        InputType = "button"
	InputTypeCheckbox      InputType = "checkbox"
	InputTypeDate          InputType = "date"
	InputTypeDateTimeLocal InputType = "datetime-local"
	InputTypeFile          InputType = "file"
	InputTypeHidden        InputType = "hidden"
	InputTypeImage         InputType = "image"
	InputTypeMonth         InputType = "month"
	InputTypeRadio         InputType = "radio"
	InputTypeRange         InputType = "range"
	InputTypeReset         InputType = "reset"
	InputTypeSearch        InputType = "search"
	InputTypeSubmit        InputType = "submit"
	InputTypeTel           InputType = "tel"
	InputTypeTime          InputType = "time"
	InputTypeUrl           InputType = "url"
	InputTypeWeek          InputType = "week"
)

type InputProps struct {
	Value       string
	Type        InputType
	Name        []string
	Required    bool
	DisplayName string
	Placeholder string
	Error       string
	Classes     templ.CSSClasses
}

func Input(props InputProps) templ.Component {
	inputName := GenerateNestedJsonFormPropName(props.Name)
	return inputTemplate(props, inputName)
}

templ inputTemplate(props InputProps, inputName string) {
	<div class={ props.Classes }>
		<label class="pr-5">{ props.DisplayName }</label>
		<input
 			id={ inputName }
 			type={ string(props.Type) }
 			class="p-2 h-12"
 			name={ inputName }
 			value={ props.Value }
 			placeholder={ props.Placeholder }
		/>
		if props.Error != "" {
			<span class="pr-6 text-red-400">{ props.Error }</span>
		}
	</div>
}

type TextAreaProps struct {
	Classes         templ.CSSClasses
	DisplayName     string
	Value           string
	Error           string
	MarkdownPreview bool
	FormID          string

	ID          string
	Name        []string
	Rows        int
	Cols        int
	Placeholder string
	MaxLenght   int
	Disabled    bool
	ReadOnly    bool
	Autofocus   bool
	Required    bool
	DirName     string
}

func TextArea(props TextAreaProps) templ.Component {
	textAreaName := GenerateNestedJsonFormPropName(props.Name)

	return textAreaTemplate(props, textAreaName)
}

templ textAreaTemplate(props TextAreaProps, textAreaName string) {
	<div
 		class={ props.Classes }
	>
		<label for={ props.ID }>{ props.DisplayName }</label>
		<br/>
		<div
 			class="flex flex-row flex-nowrap"
		>
			<textarea
 				id={ fmt.Sprintf("%s-textarea", props.ID) }
 				class="grow w-2/5"
 				name={ textAreaName }
 				if props.Placeholder != "" {
					placeholder={ props.Placeholder }
				}
 				if props.Rows != 0 {
					rows={ fmt.Sprint(props.Rows) }
				}
 				if props.Cols != 0 {
					cols={ fmt.Sprint(props.Cols) }
				}
 				if props.MaxLenght != 0 {
					maxlenght={ fmt.Sprint(props.MaxLenght) }
				}
 				if props.DirName != "" {
					dirname={ props.DirName }
				}
 				disabled?={ props.Disabled }
 				readonly?={ props.ReadOnly }
 				autofocus?={ props.Autofocus }
 				required?={ props.Required }
 				if props.MarkdownPreview {
					hx-trigger="keyup changed delay:500ms"
					hx-post="/markdown"
					hx-target={ fmt.Sprintf("#%s-markdown-preview", props.ID) }
					hx-swap="innerHTML"
					hx-ext="markdown-preview"
				}
			>
				{ props.Value }
			</textarea>
			if props.MarkdownPreview {
				<div
 					id={ fmt.Sprintf("%s-markdown-preview", props.ID) }
 					class="grow w-3/5 rounded-md border-2 border-white p-3"
				>
					@RenderMarkdown(props.Value)
				</div>
			}
		</div>
		if props.Error != "" {
			<span class="pr-6 text-red-400">{ props.Error }</span>
		}
	</div>
}
