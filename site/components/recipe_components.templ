package components

import (
	"fmt"
	"github.com/JamesTiberiusKirk/recipe-cms/models"
)

type IngredientProps struct {
	ID             string
	FormName       []string
	Ingredient     models.Ingredient
	AvailableUnits []models.Unit
}

func Ingredient(props IngredientProps) templ.Component {
	return ingredientTempl(
		props,
		append(props.FormName, "name"),
		append(append(props.FormName, "amount"), ":number"),
		GenerateNestedJsonFormPropName(props.FormName),
	)
}

templ ingredientTempl(props IngredientProps, nameFormName []string, amountFormName []string, unitFormName string) {
	<td>
		@Input(InputProps{
			Classes: templ.Classes("w-full", "flex", "flex-row"),
			Value:   props.Ingredient.Name,
			Name:    nameFormName,
			Type:    InputTypeText,
		})
	</td>
	<td>
		@Input(InputProps{
			Classes: templ.Classes("w-2/3", "flex", "flex-row"),
			Value:   fmt.Sprint(props.Ingredient.Amount),
			Name:    amountFormName,
			Type:    InputTypeNumber,
		})
	</td>
	<td>
		<div class="pt-2">
			@UnitForm(unitFormName, props.Ingredient.Unit, props.AvailableUnits)
		</div>
	</td>
	<td class="">
		<div class="">
			<img
				width="20"
				height="20"
				src="/assets/cross.svg"
				_="on click remove me.parentElement.parentElement"
				class="m-2 mt-6"
			/>
		</div>
	</td>
}

type TagsProps struct {
	BaseHTMLProps
	Tags  []string
	Name  []string
	Error string
}

func Tags(props TagsProps) templ.Component {
	assembledVal := ""
	for i, t := range props.Tags {
		if len(props.Tags) > i+1 {
			assembledVal += t + ", "
		} else {
			assembledVal += t
		}
	}
	inputName := GenerateNestedJsonFormPropName(Append(props.Name, ":splitStringByComma"))
	return tags(props, inputName, assembledVal)
}

templ tags(props TagsProps, inputName string, assembledVal string) {
	<div { props.GetBaseHTMLProps()... } class="flex w-2/3">
		<label class="pr-5">Tags:</label>
		<input
			id={ props.ID + "_input" }
			type={ string(InputTypeText) }
			class="input w-full p-2"
			name={ inputName }
			value={ assembledVal }
			placeholder="tag1, tag2, tag3"
		/>
		if props.Error != "" {
			<span class="pr-6 text-red-400">{ props.Error }</span>
		}
	</div>
}
